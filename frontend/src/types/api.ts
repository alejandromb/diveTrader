// Auto-generated TypeScript types from DiveTrader SQLModel schemas
// Generated on 2025-08-04 21:19:34 - Cache Bust v2
// DO NOT EDIT - This file is automatically generated

/**
 * Available strategy types
 */
export enum StrategyType {
  BTC_SCALPING = "btc_scalping",
  PORTFOLIO_DISTRIBUTOR = "portfolio_distributor"
}

/**
 * Available investment frequencies
 */
export enum InvestmentFrequency {
  DAILY = "daily",
  WEEKLY = "weekly",
  BIWEEKLY = "biweekly",
  MONTHLY = "monthly"
}
/**
 * Type-safe settings for BTC Scalping Strategy
 * Generated from SQLModel schema on 2025-08-04 21:19:34
 */
export interface BTCScalpingSettings {
  strategy_id: number;
  check_interval?: number;
  position_size?: number;
  take_profit_pct?: number;
  stop_loss_pct?: number;
  short_ma_periods?: number;
  long_ma_periods?: number;
  rsi_oversold?: number;
  rsi_overbought?: number;
  max_positions?: number;
  min_volume?: number;
  use_ai_analysis?: boolean;
  ai_confidence_threshold?: number;
  combine_ai_with_technical?: boolean;
  paper_trading_mode?: boolean;
  fallback_volume?: number;
  created_at?: string;
  updated_at?: string;
}
/**
 * Type-safe settings for Portfolio Distributor Strategy
 * Generated from SQLModel schema on 2025-08-04 21:19:34
 */
export interface PortfolioDistributorSettings {
  strategy_id: number;
  check_interval?: number;
  investment_amount?: number;
  investment_frequency?: InvestmentFrequency;
  symbols?: string;
  allocation_weights?: string;
  rebalance_threshold?: number;
  max_position_size?: number;
  min_cash_reserve?: number;
  created_at?: string;
  updated_at?: string;
}
/**
 * Strategy response from API
 * Generated from API response structure on 2025-08-04 21:19:34
 */
export interface Strategy {
  id: number;
  name: string;
  strategy_type: StrategyType;
  is_active: boolean;
  initial_capital: number;
  current_capital: number;
  total_invested: number;
  created_at: string;
  updated_at: string;
  config?: string;
  is_running?: boolean;
}

// API Response wrapper types
export interface ApiResponse<T> {
  data?: T;
  error?: string;
  message?: string;
}

export interface StrategyListResponse extends ApiResponse<Strategy[]> {}
export interface StrategyResponse extends ApiResponse<Strategy> {}
export interface BTCSettingsResponse extends ApiResponse<BTCScalpingSettings> {}
export interface PortfolioSettingsResponse extends ApiResponse<PortfolioDistributorSettings> {}
